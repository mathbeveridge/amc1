{
  "hash": "81d088c1a31a8cb199c38b9a394f09c4",
  "result": {
    "engine": "knitr",
    "markdown": "# Slope Fields\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n## Rundown\n\n::: {.callout-note title=\"Learning goals\"}\n-   Explain what a slope field is.\n-   Draw trajectories on a slope field and describe the dynamics of those solution curves.\n-   Use a slope field to determine the long-term behavior of a solution curve.\n-   Match a slope field to its differential equation.\n:::\n\n### Creating a Slope Field in RStudio\n\nThe `mosaicCalc` package has a `vectorfield_plot` function that we use to create a slope field. So we need to make sure that this package has been loaded into RStudio.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsuppressPackageStartupMessages(library(mosaicCalc))\n```\n:::\n\n\n\n\nHere is the code to create the slope field for \n$$\n\\frac{dP}{dt} = 6 - 2 P\n$$\non $0 \\leq t \\leq 4$ and $0 \\leq P \\leq 8$.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndPdt = makeFun(6 - 2*P ~ P)\ntmin = 0\ntmax = 4\nPmin = 0\nPmax = 8\n###########\ntscaled = (Pmax-Pmin)/(tmax-tmin)\nvectorfield_plot(t ~ tscaled, P ~ dPdt(P),\n  domain(t=tmin:tmax, P=Pmin:Pmax))\n```\n\n::: {.cell-output-display}\n![](6D-SlopeFields_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n\n\n### Creating a Trajectory in RStudio\n\nThe `mosaicCalc` package also has a `traj_plot` function that plots a solution curve to a differential equation through a given initial point.\n\nHere is the code to plot the trajectory starting at $P(0)=6$ for the differential equation $\\displaystyle{\\frac{dP}{dt} = 6 - 2 P}$. In the code below, the `nt` parameter indicated the number of \"tick marks\" to use along the trajectory.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndPdt = makeFun(6 - 2 * P ~ P)\nPstart = 6\ntmin = 0\ntmax = 5\nnumtick = 5\n#################\ndyn = makeODE( dP ~  dPdt(P) )\nsoln = integrateODE(dyn, domain(t=tmin:tmax), P=Pstart)\ntraj_plot(P(t) ~ t, soln,  nt=numtick) \n```\n\n::: {.cell-output-display}\n![](6D-SlopeFields_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\n\nHere is code that plots multiple trajectories, each for a different initial value of $P$. We set `numtick=0` so that we don't have any tick marks.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndPdt = makeFun(6 - 2 * P ~ P)\ntmin = 0\ntmax = 5\nnumtick = 0\n#################\ndyn = makeODE( dP ~  dPdt(P) )\nsoln1 = integrateODE(dyn, domain(t=tmin:tmax), P=12)\nsoln2 = integrateODE(dyn, domain(t=tmin:tmax), P=9)\nsoln3 = integrateODE(dyn, domain(t=tmin:tmax), P=6)\ntraj_plot(P(t) ~ t, soln1, color='blue',  nt=numtick) %>%\n  traj_plot(P(t) ~ t, soln2, color='magenta',  nt=numtick) %>%\n  traj_plot(P(t) ~ t, soln3, color='orange',  nt=numtick)\n```\n\n::: {.cell-output-display}\n![](6D-SlopeFields_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\n\n\nIn fact, we can get fancier by making a single plot that has a trajectory for $P(0)=6$ along with the vector field.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndPdt = makeFun(6 - 2 * P ~ P)\nPstart = 6\ntmin = 0\ntmax = 5\nPmin = 0\nPmax = 8\nnumtick = 0\n############################\ndyn = makeODE( dP ~  dPdt(P) )\nsoln = integrateODE(dyn, domain(t=tmin:tmax), P=Pstart)\ntscaled = (Pmax-Pmin)/(tmax-tmin)\ntraj_plot(P(t) ~ t, soln, color=\"blue\", nt=numtick) %>%\n  vectorfield_plot(t ~ tscaled, P ~ dPdt(P) , domain(t=tmin:tmax, P=Pmin:Pmax))\n```\n\n::: {.cell-output-display}\n![](6D-SlopeFields_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n\nWant to plot three trajectories and the vector field as well? Sure, why not?\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndPdt = makeFun(6 - 2 * P ~ P)\ntmin = 0\ntmax = 5\nPmin = 0\nPmax = 12\nnumtick = 0\n#################\ndyn = makeODE( dP ~  dPdt(P) )\nsoln1 = integrateODE(dyn, domain(t=tmin:tmax), P=12)\nsoln2 = integrateODE(dyn, domain(t=tmin:tmax), P=9)\nsoln3 = integrateODE(dyn, domain(t=tmin:tmax), P=6)\ntscaled = (Pmax-Pmin)/(tmax-tmin)\ntraj_plot(P(t) ~ t, soln1, color='blue',  nt=numtick) %>%\n  traj_plot(P(t) ~ t, soln2, color='magenta',  nt=numtick) %>%\n  traj_plot(P(t) ~ t, soln3, color='orange',  nt=numtick) %>%\n  vectorfield_plot(t ~ tscaled, P ~ dPdt(P) , domain(t=tmin:tmax, P=Pmin:Pmax))\n```\n\n::: {.cell-output-display}\n![](6D-SlopeFields_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n\n## Activities\n\n### Match the Slope Field\n\nMatch each of the following differential equations with its slope field. *Hint:* start by setting $\\frac{dy}{dx} = 0$ and solving for $y$. The slopes along the resulting curve will always be horizontal.\n\n1.  $\\displaystyle{\\frac{dy}{dx}=xy}$\n2.  $\\displaystyle{\\frac{dy}{dx}=\\frac{x}{y}}$\n3.  $\\displaystyle{\\frac{dy}{dx}=x+y}$\n4.  $\\displaystyle{\\frac{dy}{dx}=x-y}$\n\n|  |  |\n|------------------------------------|------------------------------------|\n| Slope Field A | Slope Field B |\n| ![](images/slopefield1.png){width=100%} | ![](images/slopefield2.png){width=100%} |\n|  |  |\n| Slope Field C | Slope Field D |\n| ![](images/slopefield3.png){width=100%} | ![](images/slopefield4.png){width=100%} |\n\n### Draw Some Trajectories\n\nFor each of the above slope fields, sketch the solution curves that satisfy\n\n1.  $y(0) = 1$\n2.  $y(0) = 0$\n3.  $y(0) = -1$\n\n### Removing a Pollutant\n\nA pollutant spilled on the ground decays at a rate of 4% a day. In addition, cleanup crews remove the pollutant at a rate of 20 gallons a day.\n\n1.  Write a differential equation for the amount of pollutant $P$, in gallons, left after $t$ days.\n2.  The initial amount of pollutant is 2000 gallons. Use the `plot_traj` command to create a trajectory for $0 \\leq t \\leq 50$. Set `nt=10` to show 10 tick marks on your trajectory.\n3.  Use the trajectory to estimate long it takes to clean up the pollutant. In other words, when is $P(t)=0$?\n\n### Slope Fields for Population Models\n\nCreate a slope field for each of the following population models. For each one, describe the long-term behavior for a variety of intial populations. For which initial values of $P$ does the population increase without bound? stabilize to a constant value? die out?\n\n1.  Exponential growth with harvesting. $$\n    \\frac{dP}{dt} = 0.2 P - 40\n    $$ for $0 \\leq P \\leq 300$ and $0 \\leq t \\leq 100$.\n\n2.  Constrained growth $$\n    \\frac{dP}{dt} = 0.05 P  (1 - 0.002 P) \n    $$ for $0 \\leq P \\leq 600$ and $0 \\leq t \\leq 50$.\n\n3.  Constrained growth with constant harvesting $$\n    \\frac{dP}{dt} = 0.05 P  (1 - 0.002 P) - 4\n    $$ for $0 \\leq P \\leq 600$ and $0 \\leq t \\leq 50$.\n\n### Trajectories for Population Models\n\nNow create trajectories for the population models in the previous exercise. Create a trajectory for each of the different possible outcomes (increase without bound, stabilize to a constant value, die out)\n\n1.  Exponential growth with harvesting. $$\n    \\frac{dP}{dt} = 0.2 P - 40\n    $$ for $0 \\leq P \\leq 300$ and $0 \\leq t \\leq 100$.\n\n2.  Constrained growth $$\n    \\frac{dP}{dt} = 0.05 P  (1 - 0.002 P) \n    $$ for $0 \\leq P \\leq 600$ and $0 \\leq t \\leq 50$.\n\n3.  Constrained growth with constant harvesting $$\n    \\frac{dP}{dt} = 0.05 P  (1 - 0.002 P) - 4\n    $$ for $0 \\leq P \\leq 600$ and $0 \\leq t \\leq 50$.\n\n\\\n\\\n\\\n\\\n\n## Solutions\n\n<details>\n\n<summary>Click for Solutions</summary>\n\n### Match the Slope Fields\n\n1.  $\\displaystyle{\\frac{dy}{dx}=xy}$ is Slope Field B\n2.  $\\displaystyle{\\frac{dy}{dx}=\\frac{x}{y}}$ is Slope Field A\n3.  $\\displaystyle{\\frac{dy}{dx}=x+y}$ is Slope Field D\n4.  $\\displaystyle{\\frac{dy}{dx}=x-y}$ is Slope Field C\n\n### Draw Some Trajectories\n\nHere are some trajectories (not necessarily the ones that go through the three points specified).\n\n|  |  |\n|------------------------------------|------------------------------------|\n| Slope Field A | Slope Field B |\n| \\![\\](images/slopefield1soln.png){width=100%} | \\![\\](images/slopefield2soln.png){width=100%} |\n|  |  |\n| Slope Field C | Slope Field D |\n| \\![\\](images/slopefield3soln.png){width=100%} | \\![\\](images/slopefield4soln.png){width=100%} |\n\n### Removing a Pollutant\n\n1.  The differential equation for the pollutant removal is $$\\displaystyle{\\frac{dP}{dt} = -0.04P - 20}.$$\n\n2.  \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndPdt = makeFun(-0.04 * P -  20 ~ P)\nPstart = 2000\ntmin = 0\ntmax = 50\nnumtick = 10\n#################\ndyn = makeODE( dP ~  dPdt(P) )\nsoln = integrateODE(dyn, domain(t=tmin:tmax), P=Pstart)\ntraj_plot(P(t) ~ t, soln,  nt=numtick) \n```\n\n::: {.cell-output-display}\n![](6D-SlopeFields_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\n\n3.  It takes about 40 days to clean up the pollutant. That is, $P(40)=0$.\n\n### Slope Fields for Population Models\n\nCreate a slope field for each of the following population models. For each one, describe the long-term behavior for a variety of intial populations. For which initial values of $P$ does the population increase without bound? stabilize to a constant value? die out?\n\n1.  Exponential growth with harvesting.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndPdt = makeFun(0.2 * P -  40 ~ P)\ntmin = 0\ntmax = 10\nPmin = 0\nPmax = 300\n###########\ntscaled = (Pmax-Pmin)/(tmax-tmin)\nvectorfield_plot(t ~ tscaled, P ~ dPdt(P),\n  domain(t=tmin:tmax, P=Pmin:Pmax))\n```\n\n::: {.cell-output-display}\n![](6D-SlopeFields_files/figure-html/unnamed-chunk-9-1.png){width=70%}\n:::\n:::\n\n\n\n\n-   If $P(0) > 200$ then the population increases without bound\n-   If $P(0) = 200$ then the population remains at this equilibrium value. This is an unstable equilibrium.\n-   If $P(0) < 200$ then the population decreases to zero.\n\n2.  Constrained growth\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndPdt = makeFun(0.05  * P *  (1 - 0.002 * P) ~ P)\ntmin = 0\ntmax = 60\nPmin = 0\nPmax = 600\n###########\ntscaled = (Pmax-Pmin)/(tmax-tmin)\nvectorfield_plot(t ~ tscaled, P ~ dPdt(P),\n  domain(t=tmin:tmax, P=Pmin:Pmax))\n```\n\n::: {.cell-output-display}\n![](6D-SlopeFields_files/figure-html/unnamed-chunk-10-1.png){width=70%}\n:::\n:::\n\n\n\n\n-   If $P(0) = 0$ then the population remains at 0. This is an unstable equilibrium.\n-   If $0 < P(0) < 500$ then the population increases to the carrying capacity 500.\n-   If $P(0) = 500$ then the population remains at this equilibrium value. This is a stable equilibrium, and it is the carrying capacity.\n-   If $P(0) > 500$ then the population decreases down to the carrying capacity 500.\n\n3.  Constrained growth with constant harvesting\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndPdt = makeFun(0.05  * P *  (1 - 0.002 * P) - 4 ~ P)\ntmin = 0\ntmax = 100\nPmin = 0\nPmax = 600\n###########\ntscaled = (Pmax-Pmin)/(tmax-tmin)\nvectorfield_plot(t ~ tscaled, P ~ dPdt(P),\n  domain(t=tmin:tmax, P=Pmin:Pmax))\n```\n\n::: {.cell-output-display}\n![](6D-SlopeFields_files/figure-html/unnamed-chunk-11-1.png){width=70%}\n:::\n:::\n\n\n\n\nLet's set $\\frac{dP}{dt}=0$ and solve to find the equilibrium points. We have \\begin{align}\n-0.0001 P^2 + 0.05 P   - 4 &= 0 \\\\\n P^2 - 500 P   + 40000 &= 0 \\\\\n (P-100)(P-400) &= 0\n\\end{align}\n\n-   If $P(0) < 100$ then the population decreases to 0 at 0.\n-   If $P(0) = 100$ then the population remains at 100. This is an unstable equilibrium.\n-   If $100 < P(0) < 400$ then the population increases to 400.\n-   If $P(0) = 400$ then the population remains at this equilibrium value. This is a stable equilibrium.\n-   If $P(0) > 400$ then the population decreases down to 400.\n\n### Trajectories for Population Models\n\nNow create trajectories for the population models in the previous exercise. Create a trajectory for each of the different possible outcomes (increase without bound, stabilize to a constant value, die out).\n\n1.  Exponential growth with harvesting. $$\n    \\frac{dP}{dt} = 0.2 P - 40\n    $$ for $0 \\leq P \\leq 300$ and $0 \\leq t \\leq 100$.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndPdt = makeFun(0.2 * P -  40 ~ P)\ndyn = makeODE( dP ~  dPdt(P) )\nsoln1 = integrateODE(dyn, domain(t=0:10), P=300)\nsoln2 = integrateODE(dyn, domain(t=0:10), P=200)\nsoln3 = integrateODE(dyn, domain(t=0:4), P=100)\ntraj_plot(P(t) ~ t, soln1,  nt=0) %>%\n  traj_plot(P(t) ~ t, soln2,  nt=0) %>%\n  traj_plot(P(t) ~ t, soln3,  nt=0)\n```\n\n::: {.cell-output-display}\n![](6D-SlopeFields_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n\n\n2.  Constrained growth $$\n    \\frac{dP}{dt} = 0.05 P  (1 - 0.002 P) \n    $$ for $0 \\leq P \\leq 600$ and $0 \\leq t \\leq 50$.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndPdt = makeFun(0.05 * P * (1 - 0.002 * P) ~ P)\ndyn = makeODE( dP ~ dPdt(P) )\nsoln1 = integrateODE(dyn, domain(t=0:50), P=50)\nsoln2 = integrateODE(dyn, domain(t=0:50), P=100)\nsoln3 = integrateODE(dyn, domain(t=0:50), P=300)\nsoln4 = integrateODE(dyn, domain(t=0:50), P=500)\nsoln5 = integrateODE(dyn, domain(t=0:50), P=600)\ntraj_plot(P(t) ~ t, soln1,  nt=0) %>%\n  traj_plot(P(t) ~ t, soln2,  nt=0) %>%\n  traj_plot(P(t) ~ t, soln3,  nt=0) %>%\n  traj_plot(P(t) ~ t, soln4,  nt=0) %>%\n  traj_plot(P(t) ~ t, soln5,  nt=0)\n```\n\n::: {.cell-output-display}\n![](6D-SlopeFields_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n\n\n3.  Constrained growth with constant harvesting $$\n    \\frac{dP}{dt} = 0.05 P  (1 - 0.002 P) - 4\n    $$ for $0 \\leq P \\leq 600$ and $0 \\leq t \\leq 50$.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndPdt = makeFun(0.05 * P * (1 - 0.002 * P) -4 ~ P)\ndyn = makeODE( dP ~  dPdt(P)  )\nsoln1 = integrateODE(dyn, domain(t=0:20), P=50)\nsoln2 = integrateODE(dyn, domain(t=0:50), P=100)\nsoln3 = integrateODE(dyn, domain(t=0:50), P=250)\nsoln4 = integrateODE(dyn, domain(t=0:50), P=400)\nsoln5 = integrateODE(dyn, domain(t=0:50), P=600)\ntraj_plot(P(t) ~ t, soln1,  nt=0) %>%\n  traj_plot(P(t) ~ t, soln2,  nt=0) %>%\n  traj_plot(P(t) ~ t, soln3,  nt=0) %>%\n  traj_plot(P(t) ~ t, soln4,  nt=0) %>%\n  traj_plot(P(t) ~ t, soln5,  nt=0)\n```\n\n::: {.cell-output-display}\n![](6D-SlopeFields_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n\n\n</details>\n",
    "supporting": [
      "6D-SlopeFields_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}