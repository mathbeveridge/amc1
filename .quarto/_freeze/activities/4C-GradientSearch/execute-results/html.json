{
  "hash": "2dd324033f8f7ae493a69097fcdccfe9",
  "result": {
    "engine": "knitr",
    "markdown": "# 5.C Gradient Search\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n## Rundown\n\n::: {.callout-note title=\"Learning goals\"}\n\n- Coming Soon\n\n:::\n\n### Gradient Search Example\n\nLet's use gradient search to find the maximum of the function $$\nf(x,y) = - x^4 -  x^3 + 10 x y + 2y - 8 y^2 \n$$ whose partial derivatives are $$\n\\frac{\\partial f}{\\partial x} = -4 x^3 -3 x^2  + 10 y\n\\quad \\mbox{and} \\quad\n\\frac{\\partial f}{\\partial x} = 10 x + 2 - 16 y\n$$\n\nFirst, you define the partial derivatives and then choose your starting point `(newx, newy)`. In this case, we start at `(1,1)`.\n\n\\\n\\\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npartialx = makeFun( -4*x^3 -3*x^2 + 10*y ~ x&y)\npartialy = makeFun(10*x + 2 - 16*y ~ x&y)\nnewx = 1\nnewy = 1\n```\n:::\n\n\n\n\n\\\n\\\n\nNext, you **repeatedly** run the following code block, which updates the current point by moving `0.1` times the gradient vector. This takes a small step in the uphill direction.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nslopex=partialx(newx, newy)\nslopey=partialy(newx, newy)\nnewx = newx + 0.05*slopex\nnewy = newy + 0.05*slopey\n# print new partial derivatives\nc(partialx(newx, newy), partialy(newx, newy))\n# print new point\nc(newx, newy)\n```\n:::\n\n\n\n\nRepeatedly run this code block until the partial derivatives are essentially zero (at least two zeros after the decimal point). Congrats! You have found your local maximum.\n\nYou will end at the point `(1.04,0.77)`. But note that starting at another initial point might take you to a different local maximum!\n\nYou can check that this critical point is a local maximum (and not a saddle point) by using the same method that we used for 2D Optimizatiion\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nf = makeFun( -x^4 - x^3 + 10*x*y + 2* y - 8* y^2 ~ x&y)\na=1.0405\nb=0.7753\nr = 0.1\ntheta = seq(0,2*pi,pi/10)\nf(a,b) - f(a+r*cos(theta), b+r*sin(theta))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 0.10152236 0.06983861 0.04586756 0.03913009 0.05231624 0.07998000\n [7] 0.11073639 0.13203698 0.13536588 0.11957064 0.09102447 0.06080448\n[13] 0.04028374 0.03696369 0.05199590 0.08002000 0.11113281 0.13426810\n[19] 0.14099672 0.12862949 0.10152236\n```\n\n\n:::\n:::\n\n\n\n\n## Activities\n\n### Finding a Local Minimum\n\n1.  How should I change to the code if I want to find a **local minimum** instead of a local maximum? (Hint: we want to take a small step downhill.)\n2.  Use gradient search to find a **local minimum** of $$f(x,y) = x^2 + 2 x y + 3 x + 4 y + 5 y^2.$$\n\n## Solutions\n\n<details>\n\n<summary>Click for Solutions</summary>\n\n\n\n### Finding a Local Minimum\n\n1.  In order to find a local minimum, we need to move in the opposite direction of the gradient. This is the \"downhill direction.\" All we need to do in the code is replace the two `+ 0.1` with `- 0.1`.\n\n2.  We want to find the local minimum of $$f(x,y) = x^2 + 2 x y + 3 x + 4 y + 5 y^2.$$ We have $$\n    f_x(x,y) = 2x +2y + 3, \\qquad f_y(x,y) = 2x + 4 + 10y.\n    $$ Here is our updated code to walk downhill. We set up our partials and pick our starting point.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npartialx = makeFun(2*x +2*y + 3 ~ x&y)\npartialy = makeFun(2*x + 4 + 10*y ~ x&y)\nnewx = 1\nnewy = 1\n```\n:::\n\n\n\n\nNow we repeatedly run this \"move downhill\" block until the partial derivatives are (basically) zero.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nslopex=partialx(newx, newy)\nslopey=partialy(newx, newy)\nnewx = newx - 0.05*slopex\nnewy = newy - 0.05*slopey\n# print new partial derivatives\nc(partialx(newx, newy), partialy(newx, newy))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4.7 7.3\n```\n\n\n:::\n\n```{.r .cell-code}\n# print new point\nc(newx, newy)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.65 0.20\n```\n\n\n:::\n:::\n\n\n\n\nIf we run this 20 or 30 times, the partial derivatives become zero, and we estimate our local minimum to be the point $(-1.37, -0.13)$.\n\n</details>\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}